"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryDetailsPage = void 0;
const test_1 = require("@playwright/test");
const data_1 = require("../ts/data");
const hooks_1 = require("../features/support/hooks");
class DeliveryDetailsPage {
    page;
    firstNameInput;
    lastNameInput;
    streetInput;
    postcodeInput;
    cityInput;
    countryDropdown;
    saveAddressButton;
    savedAddressContainer;
    savedAddressFirstName;
    savedAddressLastName;
    savedAddressStreet;
    savedAddressPostcode;
    savedAddressCity;
    savedAddressCountry;
    continueToPaymentButton;
    constructor(page) {
        this.page = page;
        this.firstNameInput = hooks_1.fixture.page.locator('[data-qa="delivery-first-name"]');
        this.lastNameInput = hooks_1.fixture.page.locator('[data-qa="delivery-last-name"]');
        this.streetInput = hooks_1.fixture.page.locator('[data-qa="delivery-address-street"]');
        this.postcodeInput = hooks_1.fixture.page.locator('[data-qa="delivery-postcode"]');
        this.cityInput = hooks_1.fixture.page.locator('[data-qa="delivery-city"]');
        this.countryDropdown = hooks_1.fixture.page.locator('[data-qa="country-dropdown"]');
        this.saveAddressButton = hooks_1.fixture.page.getByRole('button', { name: 'Save address for next time' });
        this.savedAddressContainer = hooks_1.fixture.page.locator('[data-qa="saved-address-container"]');
        this.savedAddressFirstName = hooks_1.fixture.page.locator('[data-qa="saved-address-firstName"]');
        this.savedAddressLastName = hooks_1.fixture.page.locator('[data-qa="saved-address-lastName"]');
        this.savedAddressStreet = hooks_1.fixture.page.locator('[data-qa="saved-address-street"]');
        this.savedAddressPostcode = hooks_1.fixture.page.locator('[data-qa="saved-address-postcode"]');
        this.savedAddressCity = hooks_1.fixture.page.locator('[data-qa="saved-address-city"]');
        this.savedAddressCountry = hooks_1.fixture.page.locator('[data-qa="saved-address-country"]');
        this.continueToPaymentButton = hooks_1.fixture.page.getByRole('button', { name: 'Continue to payment' });
    }
    fillDetails = async () => {
        await this.firstNameInput.waitFor();
        await this.firstNameInput.fill(data_1.deliveryDetails.firstName);
        await this.lastNameInput.waitFor();
        await this.lastNameInput.fill(data_1.deliveryDetails.lastName);
        await this.streetInput.waitFor();
        await this.streetInput.fill(data_1.deliveryDetails.street);
        await this.postcodeInput.waitFor();
        await this.postcodeInput.fill(data_1.deliveryDetails.postCode);
        await this.cityInput.waitFor();
        await this.cityInput.fill(data_1.deliveryDetails.city);
        await this.countryDropdown.waitFor();
        await this.countryDropdown.selectOption(data_1.deliveryDetails.country);
    };
    saveDetails = async () => {
        const addressCountBeforeSaving = await this.savedAddressContainer.count();
        await this.saveAddressButton.waitFor();
        await this.saveAddressButton.click();
        await this.savedAddressContainer.waitFor();
        await (0, test_1.expect)(this.savedAddressContainer).toHaveCount(addressCountBeforeSaving + 1);
        await this.savedAddressFirstName.first().waitFor();
        await this.savedAddressFirstName.first().waitFor();
        (0, test_1.expect)(await this.savedAddressFirstName.first().innerText()).toBe(await this.firstNameInput.inputValue());
        await this.savedAddressLastName.first().waitFor();
        (0, test_1.expect)(await this.savedAddressLastName.first().innerText()).toBe(await this.lastNameInput.inputValue());
        await this.savedAddressStreet.first().waitFor();
        (0, test_1.expect)(await this.savedAddressStreet.first().innerText()).toBe(await this.streetInput.inputValue());
        await this.savedAddressCity.first().waitFor();
        (0, test_1.expect)(await this.savedAddressCity.first().innerText()).toBe(await this.cityInput.inputValue());
        await this.savedAddressPostcode.first().waitFor();
        (0, test_1.expect)(await this.savedAddressPostcode.first().innerText()).toBe(await this.postcodeInput.inputValue());
        await this.savedAddressCountry.first().waitFor();
        (0, test_1.expect)(await this.savedAddressCountry.first().innerText()).toBe(await this.countryDropdown.inputValue());
    };
    continueToPayment = async () => {
        await this.continueToPaymentButton.waitFor();
        await this.continueToPaymentButton.click();
    };
}
exports.DeliveryDetailsPage = DeliveryDetailsPage;
